trigger: none

pool:
  name: 'MyAgents'

parameters:
- name: IsSetupInfrastructure
  type: boolean
  default: true
- name: IsTeardownInfrastructure
  type: boolean
  default: false

variables:
  workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure'

stages:
  # Stage 1 - Build
  - stage: Build
    displayName: "Build"
    condition: eq(parameters.IsSetupInfrastructure, true)
    jobs:
    - job: Build
      displayName: "Build Job"
      steps:
      - task: TerraformTaskV4@4
        name: terraformInit
        displayName: 'Initialize Terraform'
        inputs:
          provider: 'aws'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendType: 's3'
          backendAWSRegion: 'ca-central-1'
          backendServiceAWS: 'aws-terraform-svc'
          backendAWSBucketName: 'terraform-state-toast-vote'
          backendAWSKey: 'toast-vote/terraform.tfstate'
          backendAWSDynamoDBTableName: 'toast-vote-locks'
      
      - task: TerraformTaskV4@4
        name: terraformPlan
        displayName: 'Plan Terraform'
        inputs:
          provider: 'aws'
          command: 'plan'
          workingDirectory: $(workingDirectory)
          commandOptions: '-out main.tfplan'
          environmentServiceNameAWS: 'aws-terraform-svc'
      
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Terraform Plan'
        inputs:
          targetPath: $(workingDirectory)
          artifactName: 'terraformPlan'
      
      - task: Npm@1
        displayName: 'Clear npm Cache'
        inputs:
          command: 'custom'
          customCommand: 'cache clean --force'
          workingDir: '$(Build.SourcesDirectory)/frontend'
      
      - task: Npm@1
        displayName: 'Install Dependencies'
        inputs:
          command: 'install'
          workingDir: '$(Build.SourcesDirectory)/frontend'
      
      - task: Npm@1
        displayName: 'Build React App'
        inputs:
          command: 'custom'
          customCommand: 'run build'
          workingDir: '$(Build.SourcesDirectory)/frontend'
      
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Frontend'
        inputs:
          targetPath: '$(Build.SourcesDirectory)/frontend/build'
          artifactName: 'frontend_app'

  # Stage 2 - Infrastructure
  - stage: Infrastructure
    displayName: "Infrastructure Release"
    jobs:
    - job: Apply
      displayName: "Terraform Jobs"
      steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download Terraform Plan Artifact'
        inputs:
          artifactName: 'terraformPlan'
          targetPath: $(Pipeline.Workspace)
      
      - task: TerraformTaskV4@4
        name: terraformInit
        displayName: 'Initialize Terraform'
        inputs:
          provider: 'aws'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendType: 's3'
          backendAWSRegion: 'ca-central-1'
          backendServiceAWS: 'aws-terraform-svc'
          backendAWSBucketName: 'terraform-state-toast-vote'
          backendAWSKey: 'toast-vote/terraform.tfstate'
      
      - task: TerraformTaskV4@4
        name: terraformApply
        displayName: 'Apply Terraform'
        inputs:
          provider: 'aws'
          command: 'apply'
          workingDirectory: $(workingDirectory)
          commandOptions: '-input=false $(Pipeline.Workspace)/main.tfplan'
          environmentServiceNameAWS: 'aws-terraform-svc'

  # Stage 3 - Release Frontend App
  - stage: Deploy
    displayName: "Deploy WebApp"
    jobs:
    - job: WebAppRelease
      displayName: "WebApp Release Jobs"
      steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download Artifact'
        inputs:
          artifactName: 'frontend_app'
          targetPath: $(Pipeline.Workspace)/webapp
      
      - task: S3Upload@1
        displayName: 'Upload frontend to S3'
        inputs:
          awsCredentials: 'aws-connection'
          regionName: 'ca-central-1'
          bucketName: 'geekyrbhalala.online'
          sourceFolder: '$(Pipeline.Workspace)/webapp'
          globExpressions: '**'
          createBucket: false

  # Stage 4 - Infrastructure Teardown
  - stage: InfrastructureTeardown
    displayName: 'Infrastructure Teardown'
    condition: eq(parameters.IsTeardownInfrastructure, true)
    jobs:
    - job: TerraformIaC
      displayName: 'Infrastructure Teardown'
      steps:
      - task: TerraformTaskV4@4
        name: terraformInit
        displayName: 'Initialize Terraform'
        inputs:
          provider: 'aws'
          command: 'init'
          workingDirectory: $(workingDirectory)
          backendType: 's3'
          backendAWSRegion: 'ca-central-1'
          backendServiceAWS: 'aws-terraform-svc'
          backendAWSBucketName: 'terraform-state-toast-vote'
          backendAWSKey: 'toast-vote/terraform.tfstate'
      
      - task: TerraformTaskV4@4
        name: terraformPlan
        displayName: 'Plan Terraform'
        inputs:
          provider: 'aws'
          command: 'plan'
          workingDirectory: $(workingDirectory)
          commandOptions: '-out main.tfplan'
          environmentServiceNameAWS: 'aws-terraform-svc'
      
      - task: TerraformTaskV4@4
        name: terraformDestroy
        displayName: 'Destroy Terraform'
        inputs:
          provider: 'aws'
          command: 'destroy'
          workingDirectory: $(workingDirectory)
          environmentServiceNameAWS: 'aws-terraform-svc'